}
}
Meant = mean(t)
return(Meant)
}
##3、矿工选门
choosedoor<-function(n){
t = 0 #time
p = runif(n)
for ( i in 1:n){
if (p < 1/3){
t = t+2
break
}
else if(1/3 < p <2/3){
t = t +3
}
else if(p > 2/3){
t = t+5
}
}
Meant = t
return(Meant)
}
##3、矿工选门
choosedoor<-function(n){
Meant = seq(0,n)
for (i in 1:n){
s = 0
t =-1
while(s == 0){
d = sample(1:3,1,replace = T)
if(d == 1){
t = t+2
s = 1
}
else if(d == 2){
t = t+3
}
else if( d == 3){
t = t +5
}
}
Meant[i] = t
}
Meant1 = mean(Meant)
}
choosedoor1<-choosedoor(1000)
choosedoor1
#9.777223
choosedoor2<-choosedoor(1000)
choosedoor2
#9.777223
choosedoor2<-choosedoor(8000)
choosedoor2
#9.988876
choosedoor3<-choosedoor(10000)
choosedoor3
#9.988876
choosedoor3<-choosedoor(100000)
choosedoor3
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
y = matrix(0, 5, 10)
y[1, ] = c(rep(1, 5), rep(0, 5))
y[2, ] = c(rep(1, 9), rep(0, 1))
y[3, ] = c(rep(1, 8), rep(0, 2))
y[4, ] = c(rep(1, 4), rep(0, 6))
y[5, ] = c(rep(1, 7), rep(0, 3))
re = threecoinEM(Y = y)
library(animation)
oopt = ani.options(nmax = ifelse(interactive(), 1000, 2), interval = 0.1)
par(mar = c(3, 2.5, 0.5, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
buffon.needle()
##buffon 模拟
library(animation)
updateR()
update R()
updateR
install.packages("installr")
require(installr)
updateR()
opts_chunk$set(echo=FALSE, fig.path='figure/Rfig-', cache.path='cache-jss725/', dev='tikz', cache=TRUE, out.width='.49\\linewidth', aniopts='controls,autoplay,loop', fig.show='animate', results='asis', fig.width=5, fig.height=5)
render_sweave() # use boring Sweave environments
set_header(highlight = '') # do not use the Sweave.sty package
pdf.options(family = 'Palatino')
options(width = 84, digits=3, prompt='R> ', continue = "+  ")
library(animation); library(formatR)
set.seed(31415)  # for reproducibility
knit_hooks$set(custom.plot = hook_plot_custom)
library(knitr)
opts_chunk$set(echo=FALSE, fig.path='figure/Rfig-', cache.path='cache-jss725/', dev='tikz', cache=TRUE, out.width='.49\\linewidth', aniopts='controls,autoplay,loop', fig.show='animate', results='asis', fig.width=5, fig.height=5)
render_sweave() # use boring Sweave environments
set_header(highlight = '') # do not use the Sweave.sty package
pdf.options(family = 'Palatino')
options(width = 84, digits=3, prompt='R> ', continue = "+  ")
library(animation); library(formatR)
set.seed(31415)  # for reproducibility
knit_hooks$set(custom.plot = hook_plot_custom)
palette(c("black", "red"))
op = par(mar = rep(0, 4))
plot(x <- c(1:4, 4:1), y <- rep(2:1, each = 4), ann = F,
type = "n", axes = F, xlim = c(0.55, 4.45), ylim = c(0.55,
2.45), xaxs = "i", yaxs = "i")
rect(x - 0.45, y - 0.45, x + 0.45, y + 0.45, border = "darkgray")
s = seq(0, 360, length = 8)
for (i in 1:8) {
text(x[i], y[i], "Animation", srt = s[i], col = i,
cex = 0.5 + 40 * i/360)
}
text(x, y - 0.45, paste("00:0", 1:8, sep = ""), adj = c(0.5,
-0.2), col = "darkgray", cex = 0.75, font = 2)
arrows(c(1:3 + 0.35, 4:2 - 0.35), rep(2:1, each = 3),
c(1:3 + 0.65, 4:2 - 0.65), rep(2:1, each = 3), length = 0.15,
col = "darkgray")
arrows(4, 1.55, 4, 1.45, length = 0.1, col = "darkgray")
par(op)
palette("default")
palette(c("black", "red"))
op = par(mar = rep(0, 4))
plot(x <- c(1:4, 4:1), y <- rep(2:1, each = 4), ann = F,
type = "n", axes = F, xlim = c(0.55, 4.45), ylim = c(0.55,
2.45), xaxs = "i", yaxs = "i")
rect(x - 0.45, y - 0.45, x + 0.45, y + 0.45, border = "darkgray")
s = seq(0, 360, length = 8)
for (i in 1:8) {
text(x[i], y[i], "Animation", srt = s[i], col = i,
cex = 0.5 + 40 * i/360)
}
text(x, y - 0.45, paste("00:0", 1:8, sep = ""), adj = c(0.5,
-0.2), col = "darkgray", cex = 0.75, font = 2)
arrows(c(1:3 + 0.35, 4:2 - 0.35), rep(2:1, each = 3),
c(1:3 + 0.65, 4:2 - 0.65), rep(2:1, each = 3), length = 0.15,
col = "darkgray")
arrows(4, 1.55, 4, 1.45, length = 0.1, col = "darkgray")
par(op)
palette("default")
palette(c("black", "red"))
op = par(mar = rep(0, 4))
plot(x <- c(1:4, 4:1), y <- rep(2:1, each = 4), ann = F,
type = "n", axes = F, xlim = c(0.55, 4.45), ylim = c(0.55,
2.45), xaxs = "i", yaxs = "i")
rect(x - 0.45, y - 0.45, x + 0.45, y + 0.45, border = "darkgray")
s = seq(0, 360, length = 8)
for (i in 1:8) {
text(x[i], y[i], "Animation", srt = s[i], col = i,
cex = 0.5 + 40 * i/360)
}
text(x, y - 0.45, paste("00:0", 1:8, sep = ""), adj = c(0.5,
-0.2), col = "darkgray", cex = 0.75, font = 2)
arrows(c(1:3 + 0.35, 4:2 - 0.35), rep(2:1, each = 3),
c(1:3 + 0.65, 4:2 - 0.65), rep(2:1, each = 3), length = 0.15,
col = "darkgray")
arrows(4, 1.55, 4, 1.45, length = 0.1, col = "darkgray")
par(op)
palette("default")
ani.options(interval = 0.2, nmax = 40)
par(mar=c(4,4,2,.1),mgp=c(2,.9,0))
grad.desc()
"wordrotation", package = "animation"
"wordrotation", package = "animation"
stop
demo("wordrotation", package = "animation")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
demo("wordrotation", package = "animation")
demo("wordrotation", package = "animation")
demo("wordrotation", package = "animation")
demo("wordrotation", package = "animation")
> for (i in 1:360) {
+   dev.hold()
+   plot(1, ann = FALSE, type = 'n', axes = FALSE)
+   text(1, 1, 'Animation', srt = i, col = rainbow(360)[i], cex = 7 * i/360)
+   ani.pause(0.01)
+ }
demo("wordrotation", package = "animation")
ani.options(interval = 0.2, nmax = 50)
par(mar=c(4,4,2,.1),mgp=c(2,1,0))
f2 = function(x, y) sin(1/2 * x^2 - 1/4 * y^2 + 3) *
cos(2 * x + 1 - exp(y))
grad.desc(f2, c(-2, -2, 2, 2), c(-1, 0.5), gamma = 0.3,
tol = 1e-04)
windows()
cos(2 * x + 1 - exp(y)ani.options(interval = 0.2, nmax = 50)
par(mar=c(4,4,2,.1),mgp=c(2,1,0))
f2 = function(x, y) sin(1/2 * x^2 - 1/4 * y^2 + 3) *
cos(2 * x + 1 - exp(y))
grad.desc(f2, c(-2, -2, 2, 2), c(-1, 0.5), gamma = 0.3,
tol = 1e-04)
ani.options(interval = 0.2, nmax = 50)
par(mar=c(4,4,2,.1),mgp=c(2,1,0))
f2 = function(x, y) sin(1/2 * x^2 - 1/4 * y^2 + 3) *
cos(2 * x + 1 - exp(y))
grad.desc(f2, c(-2, -2, 2, 2), c(-1, 0.5), gamma = 0.3,
tol = 1e-04)
q()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
>lln.ani()
lln.ani()
?lln.ani()
source('~/.active-rstudio-document')
setwd("G:/")
setwd("G:/R")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.01, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
getwd（
getwd()
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
autobrowse = FALSE,title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
## standard normal distribution;population mean = 0,times = 30
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(pch = ".",cex = 0.6)},img.name = "normlln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
)
## standard normal distribution;population mean = 0,times = 30
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(pch = ".",cex = 0.6)},img.name = "normlln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
)
library(animation)
## standard normal distribution;population mean = 0,times = 30
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(pch = ".",cex = 0.6)},img.name = "normlln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
)
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
## standard normal distribution;population mean = 0,times = 30
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(cex = 0.6)},img.name = "normlln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:standard normal distribution")
)
## chi-square distribution; population mean = df
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
saveHTML({
ani.options(interval = 0.1, nmax = 150)
lln.ani(FUN = function(n, mu) rchisq(n, df = mu), mu = 5, cex = 0.6)},
img.name = "chi_lln", imgdir = "lln_dir", htmlfile = "lln.html",
autobrowse = FALSE, title = "the Law of Large Numbers", description = c("the Law of Large Numbers:chi-square distribution; population mean = 5")
)
getwd()
?par
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', encoding = 'UTF-8')
install.packages("demography")
install.packages(demography)
install.packages("demography")
install.packages("demography")
install.packages("demography")
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8')
install.packages("latex2exp")
source('~/.active-rstudio-document', encoding = 'UTF-8')
shinyApp(ui = ui, server = server)
?clt.ani
##Chi-square with df = 5 (mean = df, var = 2*df)
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(FUN=rcauchy, mean=NULL))
}, img.name = "CLT_cauchy", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("the variance of the Cauchy distribution does
not exist.)
)
##CLT:normal distribution
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(FUN=runif, mean=.5, sd=sqrt(1/12),type = "s")
},img.name = "CLT_norm", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:normal distribution")
##CLT:exp distribution,mean = 1, sd = 1
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
}, img.name = "CLT_exp", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:exp distribution")
)
##Chi-square with df = 5 (mean = df, var = 2*df)
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
}, img.name = "CLT_chi", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:Chi-square distribution")
)
##CLT:Cauchy distribution
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
}, img.name = "CLT_exp", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:exp distribution")
)
##Chi-square with df = 5 (mean = df, var = 2*df)
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(FUN=rcauchy, mean=NULL))
}, img.name = "CLT_cauchy", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("the variance of the Cauchy distribution does
not exist.")
##CLT:normal distribution
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(FUN=runif, mean=.5, sd=sqrt(1/12),type = "s")
},img.name = "CLT_norm", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:normal distribution")
##CLT:exp distribution,mean = 1, sd = 1
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
}, img.name = "CLT_exp", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:exp distribution")
)
##Chi-square with df = 5 (mean = df, var = 2*df)
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, 1, 0.5), mgp = c(1.5, 0.5, 0), tcl = -0.3)
f = function(n) rchisq(n, 5)
clt.ani(FUN = f, mean = 5, sd = sqrt(2 * 5))
}, img.name = "CLT_chi", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:Chi-square distribution")
)
##CLT:Cauchy distribution
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
}, img.name = "CLT_exp", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:exp distribution")
)
##Chi-square with df = 5 (mean = df, var = 2*df)
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(FUN=rcauchy, mean=NULL)
}, img.name = "CLT_cauchy", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("the variance of the Cauchy distribution does
not exist.")
)
##CLT:Cauchy distribution
saveHTML(
{
ani.options(interval = 0.1, nmax = 150)
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3)
clt.ani(type = "s")
}, img.name = "CLT_exp", imgdir = "CLT_dir", htmlfile = "CLT.html",
autobrowse = FALSE, description = c("CLT:exp distribution")
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
detach("package:ggplot2", unload = TRUE)
source('~/.active-rstudio-document')
##the simple random sampling without replacement
saveHTML(
{
main = "Simple Sample"
ani.options(nmax = 50)
par(mar = rep(1, 4))
sample.simple()
},img.name = "simple", imgdir = "sample",htmlfile = "saple.html",
description = c("Each member of the population has an equal and known chance of being selected.")
)
##the simple random sampling without replacement
saveHTML(
{
ani.options(nmax = 50)
par(main = "Simple Sample",mar = rep(1, 4))
sample.simple()
},img.name = "simple", imgdir = "sample",htmlfile = "saple.html",
description = c("Each member of the population has an equal and known chance of being selected.")
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
saveHTML(
{
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
},img.name = "systematic", imgdir = "sample_dir",htmlfile = "sample.html",
,autobrowse = FALSE,title = "Four methods of sampling",
description = c("the sample points with equal intervals are drawn out according to a random starting point.")
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
saveHTML(
{
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
},img.name = "systematic", imgdir = "sample_dir",htmlfile = "sample.html",
autobrowse = FALSE,title = "Four methods of sampling",
description = c("the sample points with equal intervals are drawn out according to a random starting point.")
)
saveHTML(
{
ani.options(nmax = 50)
par(mar = rep(1, 4))
sample.cluster(col = c("bisque", "white"))
},img.name = "systematic", imgdir = "sample_dir",htmlfile = "sample.html"
,autobrowse = FALSE,title = "Four methods of sampling",
description = c("Each rectangle stands for a cluster, and the simple random sampling without replacement is performed for each cluster. ")
)
saveHTML(
{
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
},img.name = "systematic", imgdir = "sample_dir",htmlfile = "sample.html",
autobrowse = FALSE,title = "Four methods of sampling",
description = c("the sample points with equal intervals are drawn out according to a random starting point.")
)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
saveHTML(
{
ani.options(nmax = 50)
par(mar = rep(1, 4), lwd = 2)
sample.system()
},img.name = "systematic", imgdir = "sample_dir",htmlfile = "sample.html",
autobrowse = FALSE, navigator = FALSE,title = "Four methods of sampling",
description = c("the sample points with equal intervals are drawn out according to a random starting point.")
)
source('~/.active-rstudio-document')
?conf.int
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
